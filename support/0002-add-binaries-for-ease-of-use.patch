From a36055c6caeb1c9ce683a54a458d08de8aca56e0 Mon Sep 17 00:00:00 2001
From: Gustavo Zambonin <gustavo.zambonin@grad.ufsc.br>
Date: Tue, 5 Nov 2019 20:19:29 -0300
Subject: [PATCH] add binaries for ease of use

---
 crypto_sign/rainbowIa-classic/clean/Makefile  | 23 ++++++-
 .../rainbowIa-classic/clean/rainbow-keygen.c  | 51 ++++++++++++++
 .../rainbowIa-classic/clean/rainbow-sign.c    | 61 +++++++++++++++++
 .../rainbowIa-classic/clean/rainbow-verify.c  | 67 +++++++++++++++++++
 4 files changed, 199 insertions(+), 3 deletions(-)
 create mode 100644 crypto_sign/rainbowIa-classic/clean/rainbow-keygen.c
 create mode 100644 crypto_sign/rainbowIa-classic/clean/rainbow-sign.c
 create mode 100644 crypto_sign/rainbowIa-classic/clean/rainbow-verify.c

diff --git a/crypto_sign/rainbowIa-classic/clean/Makefile b/crypto_sign/rainbowIa-classic/clean/Makefile
index 3327c0e..a74c282 100644
--- a/crypto_sign/rainbowIa-classic/clean/Makefile
+++ b/crypto_sign/rainbowIa-classic/clean/Makefile
@@ -2,9 +2,12 @@
 
 LIB=librainbowIa-classic_clean.a
 
-HEADERS = api.h blas_comm.h blas.h gf.h parallel_matrix_op.h rainbow_blas.h rainbow_config.h rainbow.h rainbow_keypair_computation.h rainbow_keypair.h utils_hash.h utils_prng.h 
-OBJECTS =  blas_comm.o parallel_matrix_op.o rainbow.o rainbow_keypair.o rainbow_keypair_computation.o sign.o utils_hash.o utils_prng.o blas.o gf.o
-
+HEADERS = api.h blas_comm.h blas.h gf.h parallel_matrix_op.h rainbow_blas.h \
+	rainbow_config.h rainbow.h rainbow_keypair_computation.h rainbow_keypair.h \
+	utils_hash.h utils_prng.h
+OBJECTS = blas_comm.o parallel_matrix_op.o rainbow.o rainbow_keypair.o \
+	rainbow_keypair_computation.o sign.o utils_hash.o utils_prng.o blas.o gf.o \
+	../../../common/randombytes.o ../../../common/sha2.o ../../../common/aes.o
 
 CFLAGS=-O3 -Wall -Wconversion -Wextra -Wpedantic -Wvla -Werror -Wmissing-prototypes -Wredundant-decls -std=c99 -I../../../common $(EXTRAFLAGS)
 
@@ -16,6 +19,20 @@ all: $(LIB)
 $(LIB): $(OBJECTS)
 	$(AR) -r $@ $(OBJECTS)
 
+bin: rainbow-keygen rainbow-sign rainbow-verify
+
+rainbow-keygen: rainbow-keygen.o $(LIB)
+rainbow-sign: rainbow-sign.o $(LIB)
+rainbow-verify: rainbow-verify.o $(LIB)
+
+test: bin
+	./rainbow-keygen
+	./rainbow-sign sk-32-32-32.out Makefile > sig.txt
+	./rainbow-verify pk-32-32-32.out Makefile sig.txt
+
 clean:
 	$(RM) $(OBJECTS)
 	$(RM) $(LIB)
+	$(RM) rainbow-keygen.o rainbow-sign.o rainbow-verify.o \
+		rainbow-keygen rainbow-sign rainbow-verify \
+		sk-32-32-32.out pk-32-32-32.out sig.txt
diff --git a/crypto_sign/rainbowIa-classic/clean/rainbow-keygen.c b/crypto_sign/rainbowIa-classic/clean/rainbow-keygen.c
new file mode 100644
index 0000000..b78800a
--- /dev/null
+++ b/crypto_sign/rainbowIa-classic/clean/rainbow-keygen.c
@@ -0,0 +1,51 @@
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#include "api.h"
+#include "rainbow_config.h"
+
+#define err(cond, ...)                                                         \
+  do {                                                                         \
+    if ((cond)) {                                                              \
+      fprintf(stderr, ##__VA_ARGS__);                                          \
+      return 1;                                                                \
+    }                                                                          \
+  } while (0)
+
+uint8_t write_key_to_file(const uint8_t *key, const char *prefix, size_t size);
+
+int32_t main() {
+  uint8_t *_sk = malloc(PQCLEAN_RAINBOWIACLASSIC_CLEAN_CRYPTO_SECRETKEYBYTES);
+  uint8_t *_pk = malloc(PQCLEAN_RAINBOWIACLASSIC_CLEAN_CRYPTO_PUBLICKEYBYTES);
+  err(!_sk || !_pk, "Failed to allocate memory for key pair.\n");
+
+  size_t return_code =
+      (size_t)PQCLEAN_RAINBOWIACLASSIC_CLEAN_crypto_sign_keypair(_pk, _sk);
+  err(return_code, "Failed to generate key pair.");
+
+  uint8_t pk_status = write_key_to_file(
+      _pk, "pk", PQCLEAN_RAINBOWIACLASSIC_CLEAN_CRYPTO_PUBLICKEYBYTES);
+  uint8_t sk_status = write_key_to_file(
+      _sk, "sk", PQCLEAN_RAINBOWIACLASSIC_CLEAN_CRYPTO_SECRETKEYBYTES);
+  err(pk_status || sk_status, "Failed to write key pair for %s.\n",
+      PQCLEAN_RAINBOWIACLASSIC_CLEAN_CRYPTO_ALGNAME);
+
+  free(_sk);
+  free(_pk);
+
+  return 0;
+}
+
+uint8_t write_key_to_file(const uint8_t *key, const char *prefix, size_t size) {
+  char buffer[16];
+  sprintf(buffer, "%s-%d-%d-%d.out", prefix, _V1, _O1, _O2);
+
+  FILE *fp = fopen(buffer, "w+");
+  err(!fp, "Failed to write on file %s.\n", buffer);
+
+  fwrite(key, sizeof(uint8_t), size, fp);
+  fclose(fp);
+
+  return 0;
+}
diff --git a/crypto_sign/rainbowIa-classic/clean/rainbow-sign.c b/crypto_sign/rainbowIa-classic/clean/rainbow-sign.c
new file mode 100644
index 0000000..119c203
--- /dev/null
+++ b/crypto_sign/rainbowIa-classic/clean/rainbow-sign.c
@@ -0,0 +1,61 @@
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#include "api.h"
+#include "rainbow_config.h"
+
+#define err(cond, ...)                                                         \
+  do {                                                                         \
+    if ((cond)) {                                                              \
+      fprintf(stderr, ##__VA_ARGS__);                                          \
+      return 1;                                                                \
+    }                                                                          \
+  } while (0)
+
+int32_t main(int32_t argc, char **argv) {
+  err(argc != 3, "Usage: %s /path/to/sk /path/to/file\n", argv[0]);
+
+  uint8_t *_sk = malloc(PQCLEAN_RAINBOWIACLASSIC_CLEAN_CRYPTO_SECRETKEYBYTES);
+  err(!_sk, "Failed to allocate memory for secret key.\n");
+
+  FILE *fp = fopen(argv[1], "rb");
+  err(!fp, "Failed to open %s.\n", argv[1]);
+
+  size_t return_code = 0;
+  return_code = fread(_sk, sizeof(uint8_t),
+                      PQCLEAN_RAINBOWIACLASSIC_CLEAN_CRYPTO_SECRETKEYBYTES, fp);
+  fclose(fp);
+  err(return_code != PQCLEAN_RAINBOWIACLASSIC_CLEAN_CRYPTO_SECRETKEYBYTES,
+      "Failed to read %s.\n", argv[1]);
+
+  fp = fopen(argv[2], "r");
+  err(!fp, "Failed to open %s.\n", argv[2]);
+
+  fseek(fp, 0, SEEK_END);
+  size_t msg_len = (size_t)ftell(fp);
+  rewind(fp);
+
+  uint8_t *message = malloc(msg_len);
+  err(!message, "Failed to allocate memory for message.\n");
+
+  return_code = fread(message, sizeof(uint8_t), msg_len, fp);
+  fclose(fp);
+  err(return_code != msg_len, "Failed to read %s.\n", argv[2]);
+
+  size_t sig_len = msg_len + PQCLEAN_RAINBOWIACLASSIC_CLEAN_CRYPTO_BYTES;
+  uint8_t *signature = malloc(sig_len);
+  err(!signature, "Failed to allocate memory for signature.\n");
+
+  return_code = (size_t)PQCLEAN_RAINBOWIACLASSIC_CLEAN_crypto_sign(
+      signature, &sig_len, message, msg_len, _sk);
+  err(return_code, "Failed to generate signature.\n");
+
+  fwrite(signature, sizeof(uint8_t), sig_len, stdout);
+
+  free(_sk);
+  free(message);
+  free(signature);
+
+  return 0;
+}
diff --git a/crypto_sign/rainbowIa-classic/clean/rainbow-verify.c b/crypto_sign/rainbowIa-classic/clean/rainbow-verify.c
new file mode 100644
index 0000000..228b7b6
--- /dev/null
+++ b/crypto_sign/rainbowIa-classic/clean/rainbow-verify.c
@@ -0,0 +1,67 @@
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#include "api.h"
+#include "rainbow_config.h"
+
+#define err(cond, ...)                                                         \
+  do {                                                                         \
+    if ((cond)) {                                                              \
+      fprintf(stderr, ##__VA_ARGS__);                                          \
+      return 1;                                                                \
+    }                                                                          \
+  } while (0)
+
+int32_t main(int32_t argc, char **argv) {
+  err(argc != 4, "Usage: %s /path/to/pk /path/to/file /path/to/signature",
+      argv[0]);
+
+  uint8_t *_pk = malloc(PQCLEAN_RAINBOWIACLASSIC_CLEAN_CRYPTO_PUBLICKEYBYTES);
+  err(!_pk, "Failed to allocate memory for public key.\n");
+
+  FILE *fp = fopen(argv[1], "rb");
+  err(!fp, "Failed to open %s.\n", argv[1]);
+
+  size_t return_code = 0;
+  return_code = fread(_pk, sizeof(uint8_t),
+                      PQCLEAN_RAINBOWIACLASSIC_CLEAN_CRYPTO_PUBLICKEYBYTES, fp);
+  fclose(fp);
+  err(return_code != PQCLEAN_RAINBOWIACLASSIC_CLEAN_CRYPTO_PUBLICKEYBYTES,
+      "Failed to read %s.\n", argv[1]);
+
+  fp = fopen(argv[2], "r");
+  err(!fp, "Failed to open %s.\n", argv[2]);
+
+  fseek(fp, 0, SEEK_END);
+  size_t msg_len = (size_t)ftell(fp);
+  rewind(fp);
+
+  uint8_t *message = malloc(msg_len);
+  err(!message, "Failed to allocate memory for message.\n");
+
+  return_code = fread(message, sizeof(uint8_t), msg_len, fp);
+  fclose(fp);
+  err(return_code != msg_len, "Failed to read %s.\n", argv[2]);
+
+  fp = fopen(argv[3], "r");
+  err(!fp, "Failed to open %s.\n", argv[3]);
+
+  size_t sig_len = msg_len + PQCLEAN_RAINBOWIACLASSIC_CLEAN_CRYPTO_BYTES;
+  uint8_t *signature = malloc(sig_len);
+  err(!signature, "Failed to allocate memory for signature.\n");
+
+  return_code = fread(signature, sizeof(uint8_t), sig_len, fp);
+  fclose(fp);
+  err(return_code != sig_len, "Failed to read %s.\n", argv[3]);
+
+  return_code = (size_t)PQCLEAN_RAINBOWIACLASSIC_CLEAN_crypto_sign_open(
+      message, &msg_len, signature, sig_len, _pk);
+  err(return_code, "Failed to verify signature.\n");
+
+  free(_pk);
+  free(message);
+  free(signature);
+
+  return 0;
+}
-- 
2.24.0

